{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file://E%3A/My%20Desktop/Python%20projects/e-commerce-website/src/lib/auth.ts"],"sourcesContent":["\"use client\"\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\n\r\n// import necessary AWS cognito commands and types from the SDK\r\nimport {\r\n  CognitoIdentityProviderClient,\r\n  ConfirmForgotPasswordCommand,\r\n  ConfirmSignUpCommand,\r\n  ForgotPasswordCommand,\r\n  InitiateAuthCommand,\r\n  SignUpCommand,\r\n  SignUpCommandInput,\r\n  ConfirmForgotPasswordCommandInput,\r\n  InitiateAuthCommandInput,\r\n  ConfirmSignUpCommandInput,\r\n  ForgotPasswordCommandInput,\r\n} from \"@aws-sdk/client-cognito-identity-provider\";\r\n\r\n// Create an AWS Cognito client\r\nconst ClientId = process.env.NEXT_PUBLIC_CLIENT_ID!;\r\nconst region = \"us-east-1\";\r\nconst client = new CognitoIdentityProviderClient({\r\n  region\r\n});\r\n \r\n// Function to sign in a user with email and password\r\nexport async function signIn(email: string, password: string) {\r\n  const input: InitiateAuthCommandInput = {\r\n    AuthFlow: \"USER_PASSWORD_AUTH\", // Use password-based auth flow\r\n    ClientId: ClientId,\r\n    AuthParameters: {\r\n      USERNAME: email , // Use email as the username\r\n      PASSWORD: password,\r\n    },\r\n  };\r\n\r\n  try {\r\n    const command = new InitiateAuthCommand(input); // Create the auth command\r\n    const response = await client.send(command); // Send the request to Cognito\r\n    console.log(\"Cognito Sign-in Response:\", response);\r\n    return response; // Return the sign-in response\r\n  } catch (error: any) {\r\n    console.error(\"Error during sign-in:\", error.message);\r\n    throw new Error(\"Failed to sign in. Please check your credentials.\");\r\n  }\r\n}\r\n\r\n// Function to sign up a new user\r\nexport async function signUp(email: string, password: string) {\r\n  const input: SignUpCommandInput = {\r\n    ClientId: ClientId,\r\n    Username: email , // Use email as the username, even though it's an alias\r\n    Password: password,\r\n    UserAttributes: [\r\n      {\r\n        Name: \"email\",\r\n        Value: email, // Pass email as an attribute\r\n      },\r\n    ],\r\n  };\r\n\r\n  try {\r\n    const command = new SignUpCommand(input);\r\n    const result = await client.send(command);\r\n    console.log(\"User successfully signed up:\", result);\r\n    return result;\r\n  } catch (err: any) {\r\n    console.error(\"Error during sign-up:\", err.message);\r\n    throw new Error(\"Failed to sign up. Please try again.\");\r\n  }\r\n}\r\n\r\n// Function to confirm a user's sign-up using a confirmation code\r\nexport async function confirmSignUp(email: string, code: string) {\r\n  const input: ConfirmSignUpCommandInput = {\r\n    ClientId: ClientId,\r\n    Username: email , // Pass email as the username\r\n    ConfirmationCode: code,\r\n  };\r\n\r\n  try {\r\n    const command = new ConfirmSignUpCommand(input); // Create the confirm sign-up command\r\n    const result = await client.send(command); // Send the request\r\n    console.log(\"Sign-up confirmed:\", result);\r\n    return result; // Return the confirmation result\r\n  } catch (err: any) {\r\n    console.error(\"Error confirming sign-up:\", err.message);\r\n    throw new Error(\"Failed to confirm sign-up. Please try again.\");\r\n  }\r\n}\r\n\r\n// Function to send a password reset email\r\nexport async function sendResetEmail(email: string): Promise<void> {\r\n  const input: ForgotPasswordCommandInput = {\r\n    ClientId: ClientId,\r\n    Username: email , // Use email as the username\r\n  };\r\n\r\n  try {\r\n    const command = new ForgotPasswordCommand(input); // Create the password reset command\r\n    await client.send(command); // Send the request\r\n  } catch (err: any) {\r\n    console.error(\"Error sending reset email:\", err.message);\r\n    throw new Error(\"Failed to send reset email. Please try again.\");\r\n  }\r\n}\r\n\r\n// Function to confirm the password reset using code and new password\r\nexport async function confirmPasswordReset(email: string, code: string, newPassword: string) {\r\n  const input: ConfirmForgotPasswordCommandInput = {\r\n    ClientId: ClientId,\r\n    Username: email, // Use email as the username\r\n    ConfirmationCode: code,\r\n    Password: newPassword,\r\n  };\r\n\r\n  try {\r\n    const command = new ConfirmForgotPasswordCommand(input); // Create the confirm reset command\r\n    await client.send(command); // Send the request\r\n  } catch (error: any) {\r\n    console.error(\"Error resetting password:\", error.message);\r\n    throw new Error(\"Failed to reset password. Please try again.\");\r\n  }\r\n}\r\n\r\nexport function redirectToGoogleOAuth() {\r\n  const domain = \"https://nibraspool-app.auth.us-east-1.amazoncognito.com\";\r\n  const clientId = process.env.NEXT_PUBLIC_CLIENT_ID!;\r\n  const redirectUrl = `${window.location.origin}/auth/callback/google`;  \r\n  const responseType = \"code\"; \r\n  console.log(domain)\r\n  console.log(clientId)\r\n  // console.log(redirectUrl)\r\n  const loginUrl = `${domain}/oauth2/authorize?response_type=${responseType}&client_id=${clientId}&redirect_uri=${redirectUrl}&identity_provider=Google`;\r\n\r\n  window.location.href = loginUrl;\r\n}\r\n\r\nexport const redirectToMicrosoftOAuth = () => {\r\n  const clientId = process.env.NEXT_PUBLIC_CLIENT_ID!;\r\n  const domain = \"https://nibraspool-app.auth.us-east-1.amazoncognito.com\";\r\n  const redirectUrl = `${window.location.origin}/auth/callback/microsoft`;\r\n\r\n  const login = `${domain}/oauth2/authorize?response_type=code&client_id=${clientId}&redirect_uri=${redirectUrl}&identity_provider=Microsoft`;\r\n\r\n  window.location.href = login;\r\n};\r\n\r\n//  \r\n// use .split(\"@\")[0] to get the username from email"],"names":[],"mappings":";;;;;;;;;AACA,qDAAqD,GAGrD,+DAA+D;AAC/D;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;;AAmBA,+BAA+B;AAC/B,MAAM;AACN,MAAM,SAAS;AACf,MAAM,SAAS,IAAI,wOAAA,CAAA,gCAA6B,CAAC;IAC/C;AACF;AAGO,eAAe,OAAO,KAAa,EAAE,QAAgB;IAC1D,MAAM,QAAkC;QACtC,UAAU;QACV,UAAU;QACV,gBAAgB;YACd,UAAU;YACV,UAAU;QACZ;IACF;IAEA,IAAI;QACF,MAAM,UAAU,IAAI,0OAAA,CAAA,sBAAmB,CAAC,QAAQ,0BAA0B;QAC1E,MAAM,WAAW,MAAM,OAAO,IAAI,CAAC,UAAU,8BAA8B;QAC3E,QAAQ,GAAG,CAAC,6BAA6B;QACzC,OAAO,UAAU,8BAA8B;IACjD,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,yBAAyB,MAAM,OAAO;QACpD,MAAM,IAAI,MAAM;IAClB;AACF;AAGO,eAAe,OAAO,KAAa,EAAE,QAAgB;IAC1D,MAAM,QAA4B;QAChC,UAAU;QACV,UAAU;QACV,UAAU;QACV,gBAAgB;YACd;gBACE,MAAM;gBACN,OAAO;YACT;SACD;IACH;IAEA,IAAI;QACF,MAAM,UAAU,IAAI,oOAAA,CAAA,gBAAa,CAAC;QAClC,MAAM,SAAS,MAAM,OAAO,IAAI,CAAC;QACjC,QAAQ,GAAG,CAAC,gCAAgC;QAC5C,OAAO;IACT,EAAE,OAAO,KAAU;QACjB,QAAQ,KAAK,CAAC,yBAAyB,IAAI,OAAO;QAClD,MAAM,IAAI,MAAM;IAClB;AACF;AAGO,eAAe,cAAc,KAAa,EAAE,IAAY;IAC7D,MAAM,QAAmC;QACvC,UAAU;QACV,UAAU;QACV,kBAAkB;IACpB;IAEA,IAAI;QACF,MAAM,UAAU,IAAI,2OAAA,CAAA,uBAAoB,CAAC,QAAQ,qCAAqC;QACtF,MAAM,SAAS,MAAM,OAAO,IAAI,CAAC,UAAU,mBAAmB;QAC9D,QAAQ,GAAG,CAAC,sBAAsB;QAClC,OAAO,QAAQ,iCAAiC;IAClD,EAAE,OAAO,KAAU;QACjB,QAAQ,KAAK,CAAC,6BAA6B,IAAI,OAAO;QACtD,MAAM,IAAI,MAAM;IAClB;AACF;AAGO,eAAe,eAAe,KAAa;IAChD,MAAM,QAAoC;QACxC,UAAU;QACV,UAAU;IACZ;IAEA,IAAI;QACF,MAAM,UAAU,IAAI,4OAAA,CAAA,wBAAqB,CAAC,QAAQ,oCAAoC;QACtF,MAAM,OAAO,IAAI,CAAC,UAAU,mBAAmB;IACjD,EAAE,OAAO,KAAU;QACjB,QAAQ,KAAK,CAAC,8BAA8B,IAAI,OAAO;QACvD,MAAM,IAAI,MAAM;IAClB;AACF;AAGO,eAAe,qBAAqB,KAAa,EAAE,IAAY,EAAE,WAAmB;IACzF,MAAM,QAA2C;QAC/C,UAAU;QACV,UAAU;QACV,kBAAkB;QAClB,UAAU;IACZ;IAEA,IAAI;QACF,MAAM,UAAU,IAAI,mPAAA,CAAA,+BAA4B,CAAC,QAAQ,mCAAmC;QAC5F,MAAM,OAAO,IAAI,CAAC,UAAU,mBAAmB;IACjD,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,6BAA6B,MAAM,OAAO;QACxD,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,SAAS;IACd,MAAM,SAAS;IACf,MAAM;IACN,MAAM,cAAc,GAAG,OAAO,QAAQ,CAAC,MAAM,CAAC,qBAAqB,CAAC;IACpE,MAAM,eAAe;IACrB,QAAQ,GAAG,CAAC;IACZ,QAAQ,GAAG,CAAC;IACZ,2BAA2B;IAC3B,MAAM,WAAW,GAAG,OAAO,gCAAgC,EAAE,aAAa,WAAW,EAAE,SAAS,cAAc,EAAE,YAAY,yBAAyB,CAAC;IAEtJ,OAAO,QAAQ,CAAC,IAAI,GAAG;AACzB;AAEO,MAAM,2BAA2B;IACtC,MAAM;IACN,MAAM,SAAS;IACf,MAAM,cAAc,GAAG,OAAO,QAAQ,CAAC,MAAM,CAAC,wBAAwB,CAAC;IAEvE,MAAM,QAAQ,GAAG,OAAO,+CAA+C,EAAE,SAAS,cAAc,EAAE,YAAY,4BAA4B,CAAC;IAE3I,OAAO,QAAQ,CAAC,IAAI,GAAG;AACzB,GAEA,IAAI;CACJ,oDAAoD","debugId":null}},
    {"offset": {"line": 229, "column": 0}, "map": {"version":3,"sources":["file://E%3A/My%20Desktop/Python%20projects/e-commerce-website/src/app/auth/login/page.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\"use client\"\r\n\r\nimport { useState } from \"react\"\r\nimport { useRouter } from \"next/navigation\"\r\nimport { redirectToGoogleOAuth, redirectToMicrosoftOAuth, signIn } from \"@/lib/auth\"\r\nimport Link from \"next/link\"\r\n\r\nexport default function LoginForm() {\r\n  const router = useRouter()\r\n  const [email, setEmail] = useState(\"\")\r\n  const [password, setPassword] = useState(\"\")\r\n  const [error, setError] = useState(\"\")\r\n  const [isSubmitting, setIsSubmitting] = useState(false)\r\n\r\n\r\n  const handleLogin = async (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    setError(\"\")\r\n    setIsSubmitting(true)\r\n\r\n    try {\r\n      const res: any = await signIn(email, password)\r\n      const tokens = res.AuthenticationResult\r\n      localStorage.setItem(\"accessToken\", tokens?.AccessToken || \"\")\r\n      localStorage.setItem(\"idToken\", tokens?.IdToken || \"\")\r\n      localStorage.setItem(\"email\", email); // the user's email\r\n      router.push(\"/auth/dashBoard\")\r\n    } catch (err: any) {\r\n      console.error(\"Login error:\", err)\r\n      setError(err.message || \"Login failed\")\r\n    } finally {\r\n      setIsSubmitting(false)\r\n    }\r\n  }\r\n\r\n  const handleForgotPassword = () => {\r\n    router.push(\"/auth/forgotPassword\")\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex justify-center items-center min-h-screen bg-gray-100\">\r\n      <div className=\"w-full max-w-md bg-white p-8 rounded-lg shadow-md\">\r\n        <h2 className=\"text-2xl font-bold text-center text-gray-800\">Welcome Back</h2>\r\n        <p className=\"text-center text-gray-600 mb-6\">Log in with your email</p>\r\n\r\n        <form onSubmit={handleLogin} className=\"space-y-6\">\r\n          {/* Social login buttons */}\r\n          <div className=\"space-y-4\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"w-full py-3 px-4 border border-gray-300 rounded-md text-black hover:bg-gray-100 flex items-center justify-center\"\r\n              onClick={redirectToMicrosoftOAuth}\r\n            >\r\n              <svg className=\"w-5 h-5 mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path d=\"M12.152 6.896c-...\" />\r\n              </svg>\r\n              Login with Microsoft\r\n            </button>\r\n\r\n            <button\r\n              type=\"button\"\r\n              className=\"w-full py-3 px-4 border border-gray-300 rounded-md text-black hover:bg-gray-100 flex items-center justify-center\"\r\n              onClick={redirectToGoogleOAuth}\r\n            >\r\n              <svg className=\"w-5 h-5 mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path d=\"M12.48 10.92v...\" />\r\n              </svg>\r\n              Login with Google\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"relative text-center text-sm\">\r\n            <span className=\"absolute inset-0 flex items-center border-t border-gray-300\" />\r\n            <span className=\"relative z-10 bg-white px-2 text-gray-500\">Or continue with</span>\r\n          </div>\r\n\r\n          {/* Email Input */}\r\n          <div className=\"space-y-2\">\r\n            <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-600\">Email</label>\r\n            <input\r\n              id=\"email\"\r\n              type=\"email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              placeholder=\"m@example.com\"\r\n              className=\"w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          {/* Password Input */}\r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex justify-between items-center\">\r\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-600\">Password</label>\r\n              <Link href=\"/auth/forgotPassword\" onClick={handleForgotPassword} className=\"text-sm text-indigo-600 hover:underline\">Forgot your password?</Link>\r\n            </div>\r\n            <input\r\n              id=\"password\"\r\n              type=\"password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              placeholder=\"********\"\r\n              className=\"w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          {/* Error Message */}\r\n          {error && <p className=\"text-red-500 text-sm text-center\">{error}</p>}\r\n\r\n          {/* Submit Button */}\r\n          <button\r\n            type=\"submit\"\r\n            disabled={isSubmitting}\r\n            className=\"w-full py-3 px-4 bg-indigo-600 text-white font-medium rounded-md hover:bg-indigo-700 focus:outline-none\"\r\n          >\r\n            {isSubmitting ? \"Logging in...\" : \"Login\"}\r\n          </button>\r\n\r\n          {/* Redirect to Sign Up */}\r\n          <div className=\"text-center text-sm\">\r\n            Don&apos;t have an account? <a href=\"/auth/signup\" className=\"text-indigo-600 hover:underline\">Sign up</a>\r\n          </div>\r\n        </form>\r\n\r\n        {/* Terms and Privacy */}\r\n        <div className=\"text-center text-xs text-gray-500 mt-6\">\r\n          By clicking continue, you agree to our <a href=\"#\" className=\"text-indigo-600 hover:underline\">Terms of Service</a> and <a href=\"#\" className=\"text-indigo-600 hover:underline\">Privacy Policy</a>.\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}